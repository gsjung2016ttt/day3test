
In [52]: print(1/1)
1.0

In [53]: def sq(x):
    ...:     return x*x
    ...:
  

In [54]: sq(10)
Out[54]: 100

In [55]: sq
Out[55]: <function __main__.sq>

In [56]: sq
Out[56]: <function __main__.sq>

In [57]: pointSq = sq

In [58]: pointSq
Out[58]: <function __main__.sq>

In [59]: a = {1, 2, 3}

In [60]: b = {3, 4, 5}

In [61]: a
Out[61]: {1, 2, 3}

In [62]: b
Out[62]: {3, 4, 5}

In [63]: a.union(b)
Out[63]: {1, 2, 3, 4, 5}

In [64]: exit()

C:\Users\gsjun>ipython
Python 3.5.2 (v3.5.2:4def2a2901a5, Jun 25 2016, 22:01:18) [MSC v.1900 32 bit (Intel)]
Type "copyright", "credits" or "license" for more information.

IPython 5.0.0 -- An enhanced Interactive Python.
?         -> Introduction and overview of IPython's features.
%quickref -> Quick reference.
help      -> Python's own help system.
object?   -> Details about 'object', use 'object??' for extra details.

In [1]: mylist = [101, 3, 11, 55, 24, 52]

In [2]: sorted(mylist, reverse=True)
Out[2]: [101, 55, 52, 24, 11, 3]

In [3]: mylist
Out[3]: [101, 3, 11, 55, 24, 52]

In [4]: sorted(mylist, key=lambda i: i%10)
Out[4]: [101, 11, 52, 3, 24, 55]

In [5]: mylist
Out[5]: [101, 3, 11, 55, 24, 52]

In [6]: print(0 < 1)
True

In [7]: print('a' <'a')
False

In [8]: print('a' <'b')
True

In [9]: print([9]<[0])
False

In [10]: print("abc" < "abz")
True

In [11]: print(["a", "b", "c"] < ["a", "b", "z"])
True

In [12]: filter(lambda i: i%10==1, mylist)
Out[12]: <filter at 0x480b030>

In [13]: list(filter(lambda i: i%10==1, mylist))
Out[13]: [101, 11]

In [14]: for i in filter(lambda i: i%10==1, mylist):
    ...:         print(i)
    ...:
101
11

In [15]: mylist
Out[15]: [101, 3, 11, 55, 24, 52]

In [16]: map(lambda i: i**2, mylist)
Out[16]: <map at 0x47f2130>

In [17]: list(map(lambda i: i**2, mylist))
Out[17]: [10201, 9, 121, 3025, 576, 2704]

In [18]: max(mylist)
Out[18]: 101

In [19]: max(map(lambda i: i**2, mylist))
Out[19]: 10201

In [20]: max(map(lambda i: i//2, mylist))
Out[20]: 50

In [21]: max(mylist)
Out[21]: 101

In [22]: mylist
Out[22]: [101, 3, 11, 55, 24, 52]

In [23]: max(mylist, key=lambda i: i%10)
Out[23]: 55

In [24]: [max(mylist, key=lambda i: i%10)]
Out[24]: [55]

In [25]: list(max(mylist, key=lambda i: i%10))
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-25-2fa4e0cbe17f> in <module>()
----> 1 list(max(mylist, key=lambda i: i%10))

TypeError: 'int' object is not iterable

In [26]: result_list = list()

In [27]: result_list.append(max(mylist, key=lambda i: i%10))

In [28]: result_list
Out[28]: [55]

In [29]: max([])
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
<ipython-input-29-8d2766aecf92> in <module>()
----> 1 max([])

ValueError: max() arg is an empty sequence

In [30]: max([], default=0)
Out[30]: 0

In [31]: mylist = list(range(10))

In [32]: mylist
Out[32]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

In [33]: print(sorted(mylist, key=lambda i:i%3, reverse=False))
[0, 3, 6, 9, 1, 4, 7, 2, 5, 8]

In [34]: print(sorted(mylist, key=lambda i:i%3, reverse=True))
[2, 5, 8, 1, 4, 7, 0, 3, 6, 9]

In [35]: print(list(filter(key=lambda i:i%3, mylist)))
  File "<ipython-input-35-1fce5bfee7be>", line 1
    print(list(filter(key=lambda i:i%3, mylist)))
                                       ^
SyntaxError: positional argument follows keyword argument


In [36]: print(list(filter(lambda i:i%3, mylist)))
[1, 2, 4, 5, 7, 8]

In [37]: print(list(map(lambda i:i%3, mylist)))
[0, 1, 2, 0, 1, 2, 0, 1, 2, 0]

In [38]: print(list(map(lambda i:i*2, filter(lambda i: i%3, mylist))))
[2, 4, 8, 10, 14, 16]

In [39]: print(max(-10, 1, 2, 3, key = lambda i:abs(i))))
  File "<ipython-input-39-04f9bba1c171>", line 1
    print(max(-10, 1, 2, 3, key = lambda i:abs(i))))
                                                   ^
SyntaxError: invalid syntax


In [40]: print(max(-10, 1, 2, 3, key = lambda i:abs(i)))
-10

In [41]: print(min(-10, 1, 2, 3, key = lambda i:abs(i)))
1

In [42]: print(max(range(-10, 20), key = lambda i:abs(i)))
19

In [43]: print(min(range(-10, 20), key = lambda i:abs(i)))
0

In [44]: mylist
Out[44]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

In [45]: mylist = [101, 2, 213, 52, 55]

In [46]: mylist.sort()

In [47]: mylist
Out[47]: [2, 52, 55, 101, 213]

In [48]: import random

In [49]: random.shuffle(mylist)

In [50]: mylist
Out[50]: [52, 2, 213, 55, 101]

In [51]: class Person(object):
    ...:     def __init__(self, name, age):
    ...:         self.name = name
    ...:         self.age = age
    ...:

In [52]: class Person(object):
    ...:     def __init__(self, name, age):
    ...:         self.name = name
    ...:         self.age = age
    ...: people = [
    ...:         Person("Cullsu", 10),
    ...:         Person("Younghee", 11),
    ...:         Person("Kensu",9),
    ...:         Person("Myungja", 20),
    ...:         Person("Soyung", 12)
    ...:         ]
    ...:

In [53]: class Person(object):
    ...:     def __init__(self, name, age):
    ...:         self.name = name
    ...:         self.age = age
    ...: people = [
    ...:         Person("Cullsu", 10),
    ...:         Person("Younghee", 11),
    ...:         Person("Kensu",9),
    ...:         Person("Myungja", 20),
    ...:         Person("Soyung", 12)
    ...:         ]
    ...: people.sort(key=lambda person: person.age, reverse=T
    ...: rue)
    ...: for person in people:
    ...:     print(person.name, person.age)
    ...:
Myungja 20
Soyung 12
Younghee 11
Cullsu 10
Kensu 9

In [54]: mylist = [10, 11, 9, 20, 12, 313, 211, 121]

In [55]: mylist.sort(key=lambda i: (len(str(i)), i%10))

In [56]: print(mylist)
[9, 10, 20, 11, 12, 211, 121, 313]

In [57]: mylist list(range(10))
  File "<ipython-input-57-4d73ee7fcdd2>", line 1
    mylist list(range(10))
              ^
SyntaxError: invalid syntax


In [58]: mylist= list(range(10))

In [59]: result = []

In [60]: mylist= list(range(10))

In [61]: mylist
Out[61]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

In [62]: {i%3 for i in mylist if i%3 == 0}
Out[62]: {0}

In [63]: {i%3 for i in mylist}
Out[63]: {0, 1, 2}

In [64]: mylist
Out[64]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

In [65]: {i:i%3 for i in mylist}
Out[65]: {0: 0, 1: 1, 2: 2, 3: 0, 4: 1, 5: 2, 6: 0, 7: 1, 8: 2, 9: 0}

In [66]: val_list_comprehension1 = [i**2 for i in range(10)]
    ...: print(val_list_comprehension1)
    ...:
    ...: mylist1 = []
    ...: for i in range(10):
    ...:     mylist1.append(i**2)
    ...: print(mylist1)
    ...:
[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]

In [67]: val_list_comprehension1 = [i**2 for i in range(10)]
    ...: print(val_list_comprehension1)
    ...:
[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]

In [68]: mylist1 = []
    ...: for i in range(10):
    ...:     mylist1.append(i**2)
    ...: print(mylist1)
    ...: mylist1 = []
    ...: for i in range(10):
    ...:     mylist1.append(i**2)
    ...: print(mylist1)
    ...:
[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]

In [69]: mylist1 = []
    ...: for i in range(10):
    ...:     mylist1.append(i**2)
    ...: print(mylist1)
    ...:
[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]

In [70]: val_list_comprehension1 = [i**2 for in in range(10)]
    ...: print(val_list_comprehenshion1)
  File "<ipython-input-70-176a1b7fedac>", line 1
    val_list_comprehension1 = [i**2 for in in range(10)]print(val_list_comprehenshion1)
                                         ^
SyntaxError: invalid syntax


In [71]: val_list_comprehension1 = [i**2 for in range(10)]pri
    ...: nt(val_list_comprehenshion1)
  File "<ipython-input-71-3e1b984bd0c6>", line 1
    val_list_comprehension1 = [i**2 for in range(10)]print(val_list_comprehenshion1)
                                         ^
SyntaxError: invalid syntax


In [72]: val_list_comprehension1 = [i**2 for in range(10)]pri
    ...: nt(val_list_comprehenshion1)
  File "<ipython-input-72-3e1b984bd0c6>", line 1
    val_list_comprehension1 = [i**2 for in range(10)]print(val_list_comprehenshion1)
                                         ^
SyntaxError: invalid syntax


In [73]: val_list_comprehension1 = [i**2 for i in range(10)]

In [74]: val_list_comprehension1 = [i**2 for i in range(10)]

In [75]: print(val_list_comprehension1)
[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]

In [76]: mylist1 = []

In [77]: for i in range(10):
    ...:     mylist1.append(i**2)
    ...: print(mylist1)
    ...:
[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]

In [78]: mylist1
Out[78]: [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]

In [79]: val_list_comprehension2 = [i**2 for i in range(10) i
    ...: f i%2 == 0]

In [80]: val_list_comprehension2
Out[80]: [0, 4, 16, 36, 64]

In [81]: mylist2 = []

In [82]: for i in range(10):
    ...:     if i%2 == 0:
    ...:         mylist2.append(i**2)
    ...: print(mylist2)
    ...:
[0, 4, 16, 36, 64]

In [83]: val_dict_comprehension = {i:i**2 for i in range(10)}
    ...:
    ...: print(val_dict_comprehension)
    ...:
{0: 0, 1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36, 7: 49, 8: 64, 9: 81}

In [84]: mydic = {}

In [85]: for i in range(10):
    ...:     if i%2 == 0:
    ...:         mydic[i] = i**2
    ...:  print(mydic)
  File "<ipython-input-85-fde9944271f7>", line 4
    print(mydic)
                ^
IndentationError: unindent does not match any outer indentation level


In [86]: for i in range(10):
    ...:     if i%2 == 0:
    ...:         mydic[i] = i**2 print(mydic)
  File "<ipython-input-86-cc1b03c6dfcf>", line 3
    mydic[i] = i**2 print(mydic)
                        ^
SyntaxError: invalid syntax


In [87]: for i in range(10):
    ...:     if i%2 == 0:
    ...:         mydic[i] = i**2 print(mydic)
  File "<ipython-input-87-cc1b03c6dfcf>", line 3
    mydic[i] = i**2 print(mydic)
                        ^
SyntaxError: invalid syntax


In [88]: for i in range(10):
    ...:     if i%2 == 0:
    ...:         mydic[i] = i**2
    ...: print(mydic)
    ...:
{0: 0, 8: 64, 2: 4, 4: 16, 6: 36}

In [89]: val_set_comprehension = {i%5 for i in range(100)}

In [90]: val_set_comprehension
Out[90]: {0, 1, 2, 3, 4}

In [91]: myset = set()

In [92]: for i in range(100):
    ...:     if i%2 == 0:
    ...:         myset.add(i%5)
    ...: print(myset)
    ...:
{0, 1, 2, 3, 4}

In [93]: list?
Init signature: list(self, /, *args, **kwargs)
Docstring:
list() -> new empty list
list(iterable) -> new list initialized from iterable's items
Type:           type

In [94]: help(list)
Help on class list in module builtins:

class list(object)
 |  list() -> new empty list
 |  list(iterable) -> new list initialized from iterable's items
 |
 |  Methods defined here:
 |
 |  __add__(self, value, /)
 |      Return self+value.
 |
 |  __contains__(self, key, /)
 |      Return key in self.
 |
 |  __delitem__(self, key, /)
 |      Delete self[key].
 |
 |  __eq__(self, value, /)
 |      Return self==value.
 |
 |  __ge__(self, value, /)
 |      Return self>=value.
 |
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |
 |  __getitem__(...)
 |      x.__getitem__(y) <==> x[y]
 |
 |  __gt__(self, value, /)
 |      Return self>value.
 |
 |  __iadd__(self, value, /)
 |      Implement self+=value.
 |
 |  __imul__(self, value, /)
 |      Implement self*=value.
 |
 |  __init__(self, /, *args, **kwargs)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |
 |  __iter__(self, /)
 |      Implement iter(self).
 |
 |  __le__(self, value, /)
 |      Return self<=value.
 |
 |  __len__(self, /)
 |      Return len(self).
 |
 |  __lt__(self, value, /)
 |      Return self<value.
 |
 |  __mul__(self, value, /)
 |      Return self*value.n
 |
 |  __ne__(self, value, /)
 |      Return self!=value.
 |
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |
 |  __repr__(self, /)
 |      Return repr(self).
 |
 |  __reversed__(...)
 |      L.__reversed__() -- return a reverse iterator over the list
 |
 |  __rmul__(self, value, /)
 |      Return self*value.
 |
 |  __setitem__(self, key, value, /)
 |      Set self[key] to value.
 |
 |  __sizeof__(...)
 |      L.__sizeof__() -- size of L in memory, in bytes
 |
 |  append(...)
 |      L.append(object) -> None -- append object to end
 |
 |  clear(...)
 |      L.clear() -> None -- remove all items from L
 |
 |  copy(...)
 |      L.copy() -> list -- a shallow copy of L
 |
 |  count(...)
 |      L.count(value) -> integer -- return number of occurrences of value
 |
 |  extend(...)
 |      L.extend(iterable) -> None -- extend list by appending elements from the iterable
 |
 |  index(...)
 |      L.index(value, [start, [stop]]) -> integer -- return first index of value.
 |      Raises ValueError if the value is not present.
 |
 |  insert(...)
 |      L.insert(index, object) -- insert object before index
 |
 |  pop(...)
 |      L.pop([index]) -> item -- remove and return item at index (default last).
 |      Raises IndexError if list is empty or index is out of range.
 |
 |  remove(...)
 |      L.remove(value) -> None -- remove first occurrence of value.
 |      Raises ValueError if the value is not present.
 |
 |  reverse(...)
 |      L.reverse() -- reverse *IN PLACE*
 |
 |  sort(...)
 |      L.sort(key=None, reverse=False) -> None -- stable sort *IN PLACE*
 |
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |
 |  __hash__ = None


In [95]: i**2 for i in range(10)
  File "<ipython-input-95-5a33cfc6f768>", line 1
    i**2 for i in range(10)
           ^
SyntaxError: invalid syntax


In [96]: (i**2 for i in range(10))
Out[96]: <generator object <genexpr> at 0x01450AE0>

In [97]: list((i**2 for i in range(10)))
Out[97]: [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]

In [98]: tuple((i**2 for i in range(10)))
Out[98]: (0, 1, 4, 9, 16, 25, 36, 49, 64, 81)

In [99]: dic(((i,i**2) for i in range(10)))
--------------------------------------------------------------
NameError                    Traceback (most recent call last)
<ipython-input-99-5affa4097e1a> in <module>()
----> 1 dic(((i,i**2) for i in range(10)))

NameError: name 'dic' is not defined

In [100]: dic((i,i**2) for i in range(10))
--------------------------------------------------------------
NameError                    Traceback (most recent call last)
<ipython-input-100-f31c01b5caa3> in <module>()
----> 1 dic((i,i**2) for i in range(10))

NameError: name 'dic' is not defined

In [101]: dict((i,i**2) for i in range(10))
Out[101]: {0: 0, 1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36, 7: 49, 8: 64, 9: 81}

In [102]: